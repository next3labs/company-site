const sitemap = require("@quasibit/eleventy-plugin-sitemap");
const Image = require("@11ty/eleventy-img");
const path = require("path");

module.exports = function(eleventyConfig) {
  // Copy assets to output directory
  eleventyConfig.addPassthroughCopy("src/assets");

  // Copy CNAME file for custom domain
  eleventyConfig.addPassthroughCopy("src/CNAME");

  // Copy SEO files
  eleventyConfig.addPassthroughCopy("src/robots.txt");
  // Note: sitemap.xml is now auto-generated by eleventy-plugin-sitemap

  // Watch CSS files for changes
  eleventyConfig.addWatchTarget("src/assets/css/");

  // Auto-generate sitemap.xml with proper lastmod dates
  eleventyConfig.addPlugin(sitemap, {
    sitemap: {
      hostname: "https://next3labs.com",
    },
  });

  // Image optimization shortcode
  // Usage: {% image "src/assets/images/photo.jpg", "Alt text", "320, 640, 1024" %}
  eleventyConfig.addShortcode("image", async function(src, alt, sizes = "320, 640, 1024") {
    if (!alt) {
      throw new Error(`Missing \`alt\` attribute on image shortcode for: ${src}`);
    }

    // Parse sizes if it's a string
    const widthsArray = typeof sizes === "string"
      ? sizes.split(",").map(s => parseInt(s.trim()))
      : sizes;

    // Resolve the full path relative to the project root
    const fullPath = path.join(__dirname, src);

    let metadata = await Image(fullPath, {
      widths: widthsArray,
      formats: ["avif", "webp", "jpeg"],
      outputDir: "./_site/assets/images/optimized",
      urlPath: "/assets/images/optimized/",
      filenameFormat: function (id, src, width, format, options) {
        const extension = path.extname(src);
        const name = path.basename(src, extension);
        return `${name}-${width}w.${format}`;
      }
    });

    let imageAttributes = {
      alt,
      sizes: "(max-width: 640px) 320px, (max-width: 1024px) 640px, 1024px",
      loading: "lazy",
      decoding: "async",
    };

    return Image.generateHTML(metadata, imageAttributes);
  });

  // Set custom directories for input, output, includes, and data
  return {
    dir: {
      input: "src",
      includes: "_includes",
      data: "_data",
      output: "_site"
    },
    // Use Nunjucks for HTML files
    htmlTemplateEngine: "njk",
    markdownTemplateEngine: "njk"
  };
};
